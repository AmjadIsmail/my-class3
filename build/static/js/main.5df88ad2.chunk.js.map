{"version":3,"sources":["Hello.js","Room.js","ValueContext.js","Child.js","Parent.js","App.js","serviceWorker.js","index.js"],"names":["Hello","firstName","className","Room","state","useState","console","log","isLit","setLit","age","setAge","isGender","setGender","onClick","ValueContext","React","createContext","Child","value","useContext","updateValue","Parent","App","name","Provider","Boolean","window","location","hostname","match","ReactDOM","render","isReactDeveloper","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"uRAOeA,MAJf,YAA6B,IAAbC,EAAY,EAAZA,UACd,OAAO,uBAAGC,UAAU,UAAb,oCAAyDD,I,aCsCnDE,MAxCf,WAGA,IAAMC,EAAQC,oBAAS,GACvBC,QAAQC,IAAI,WAAaH,GAHzB,MAIoBC,oBAAS,GAJ7B,mBAIKG,EAJL,KAIWC,EAJX,OAKmBJ,mBAAS,IAL5B,mBAKKK,EALL,KAKSC,EALT,OAM2BN,oBAAS,GANpC,mBAMKO,EANL,KAMcC,EANd,KAQA,OACA,yBAAKX,UAAS,eAAUM,EAAO,MAAO,SAAtC,gBACkBA,EAAO,MAAO,OAC5B,6BAFJ,SAGWE,EACP,6BACA,4BAAQI,QAAS,kBAAKL,GAAQD,KAA9B,gBACA,6BACA,4BAAQM,QAAU,WACER,QAAQC,IAAI,+BACZI,IAASD,KAF7B,gBAOA,6BAdJ,YAecE,EACTA,EAAU,SAAU,OAErB,4BAAQE,QAAS,WAEbD,GAAWD,KAFf,mBC3BWG,EAFMC,IAAMC,cAAc,IAAG,eCc7BC,MAbf,WAEI,IAAIC,EAAQC,qBAAWL,GACvBT,QAAQC,IAAI,QAAQY,GACpB,IAAIE,EAAcF,EAAM,GACxB,OAAO,6CACWA,EAAM,GACpB,2BAAOL,QAAS,WAAOO,IAAcF,EAAM,MAA3C,kBCKOG,MAXf,WAEA,OAEI,6CAEI,kBAAC,EAAD,QCkBOC,MApBf,YAA2B,IAAbC,EAAY,EAAZA,KAAMd,EAAM,EAANA,IACRS,EAAMd,mBAAS,IACnB,OACA,kBAAC,EAAaoB,SAAd,CAAuBN,MAAOA,GACnC,0DACkCK,EADlC,UAC+Cd,EAAM,EAC9C,6BACA,kBAAC,EAAD,CAAOT,UAAWuB,IAEzB,6BACA,kBAAC,EAAD,MAEA,6BARA,6DAUA,kBAAC,EAAD,SCTiBE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,6BAAK,kBAAC,EAAD,CAAKR,KAAK,WAAWd,IAAK,GAAIuB,kBAAkB,KACrDC,SAASC,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrC,QAAQqC,MAAMA,EAAMC,c","file":"static/js/main.5df88ad2.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Hello.css'\r\n\r\nfunction Hello({firstName}) {\r\n  return <p className=\"myname\" >This is para in Hello Tag name : {firstName}</p>\r\n}\r\n\r\nexport default Hello;\r\n","import React, {useState} from 'react';\r\nimport './Room.css'\r\nfunction Room()\r\n{\r\n\r\nconst state = useState(true);\r\nconsole.log(\"State = \" , state);\r\nlet [isLit,setLit]= useState(false);\r\nlet [age,setAge] = useState(24);\r\nlet [isGender,setGender] = useState(true);\r\n\r\nreturn(\r\n<div className={`room ${isLit? \"lit\": \"dark\"}`}>\r\n    this Room is {isLit? \"lit\": \"dark\"}\r\n    <br/>\r\n    Age : {age}\r\n    <br/>\r\n    <button onClick={()=> setLit(!isLit)}>Toggle Light</button>\r\n    <br/>\r\n    <button onClick={ ()=> {\r\n                        console.log(\"Increase age arrow function\");\r\n                        setAge(++age);\r\n                        }}>\r\n                            Increase Age\r\n    </button>\r\n\r\n    <br/>\r\n    Gender = {isGender}\r\n    {isGender? \"FeMale\": \"Male\"}  \r\n     \r\n    <button onClick={()=> \r\n       {\r\n        setGender(!isGender);\r\n     \r\n      }\r\n        }>Switch Gender</button>\r\n</div>\r\n\r\n)\r\n\r\n}\r\n\r\nexport default Room;","import React from 'react'\r\nconst ValueContext = React.createContext(42,()=>{});\r\n\r\nexport default ValueContext;","import React, { useContext } from 'react';\r\nimport ValueContext from './ValueContext';\r\nfunction Child()\r\n{\r\n    let value = useContext(ValueContext);\r\n    console.log(\"Value\",value);\r\n    let updateValue = value[1];\r\n    return <div>\r\n        Child Number {value[0]}\r\n        <butto onClick={()=> { updateValue(++value[0]) }}> \r\n        Update Value</butto>\r\n\r\n    </div>\r\n}\r\n\r\nexport default Child;","import React from 'react'\r\nimport Child from './Child'\r\n\r\nfunction Parent()\r\n{\r\nreturn (\r\n\r\n    <div>\r\n        Child section\r\n        <Child></Child>\r\n    </div>\r\n)\r\n\r\n}\r\nexport default Parent;","import React, { useState, useReducer } from 'react';\nimport './App.css';\nimport Hello from './Hello';\nimport Room from './Room';\nimport Parent from './Parent';\nimport ValueContext from './ValueContext'\n\nfunction App({name, age}) {\n        let value=useState(48);\n        return( \n        <ValueContext.Provider value={value}>      \n   <div>\n          Hello from App.js updated {name} Age = {age - 5}\n          <br/>\n          <Hello firstName={name} ></Hello>\n\n   <br/>\n   <Room></Room>\n\n   <br/>\n   Parent and child section with context value and useReducer\n   <Parent></Parent>\n          \n        </div>\n        </ValueContext.Provider>\n        )\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <div><App name=\"Zia Khan\" age={25} isReactDeveloper={true} /></div>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}